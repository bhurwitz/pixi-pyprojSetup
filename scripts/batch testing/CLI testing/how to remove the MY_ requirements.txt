REM ##############
REM ##
REM ## This is Copilot's response to updating the CLI test script so that the 'config' file doesn't have to prepend anything with 'MY_'; the correct placeholders will get recognized (assuming they're spelled the same) and overwritten by the config values, though config values cannot add new placeholders.


REM ## Step 1: Track Placeholder Keys
REM ## Modify :LoadPlaceholders to keep track of keys that need to be persisted.

:LoadPlaceholders
if not exist "%~1" (
    call :ErrorExit "File '%~1' not found."
)

call :debug "Loading placeholders from '%~1'."
for /f "usebackq tokens=1* delims==" %%A in ("%~1") do (
    set "%%A=%%B"
    call :debug "Set variable '%%A' to '%%B'."

    if not defined default_keys (
        set "default_keys=%%A"
    ) else (
        set "default_keys=!default_keys! %%A"
    )

    if defined MY_%%A (
        set "MY_%%A=%%B"
        call :debug "Overriding placeholder 'MY_%%A' with value from config: '%%B'."
    )
)
goto :eof

REM # Step 2: Writing Out the Consolidated Placeholder Values
REM # After all overrides (CLI, config, and prompts), loop through default_keys and write the final values into a new file.

:: Define the final output file
set "final_placeholdersFile=%config_dirPath%\final_placeholders.txt"

:: Initialize the new file
echo # Consolidated Placeholders File > "%final_placeholdersFile%"
echo # Default values overridden by user settings, config, CLI, or prompts >> "%final_placeholdersFile%"

:: Write all final placeholders to the output file
for %%A in (%default_keys%) do (
    echo %%A=!%%A! >> "%final_placeholdersFile%"
)
